# Workflow's name
name: Build Client

# Workflow's trigger
# on: [push, pull_request]
on:
  push:
    tags:
      - v*

# Workflow's jobs
jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest ]

    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # 安装java
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      # 编译服务端java版本
      - name: Build Java
        run: mvn clean package -B '-Dmaven.test.skip=true' -f ali-dbhub-server/pom.xml

      # 打包jre
      - name: Build jre
        run: jlink --add-modules java.base,java.management,java.naming,java.net.http,java.desktop,java.security.jgss,java.security.sasl,java.sql,jdk.httpserver,jdk.unsupported,java.instrument --output jre --no-man-pages --no-header-files --compress=2

      # 复制jre & 服务端java 到制修订位置
      - name: Copy app &  jre
        run: |
          cp -r jre ali-dbhub-client/electron/
          mkdir ali-dbhub-client/electron/app
          cp ali-dbhub-server/ali-dbhub-server-start/target/ali-dbhub-server-start.jar ali-dbhub-client/electron/app/

      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: 16
          # cache: "yarn"
          # cache-dependency-path: ali-dbhub-client/yarn.lock

      # - name: change directory ali-dbhub-client

    
      # - name: Install UNM dependencies for macOS
      #   if: runner.os == 'Windows'
      #   run: |
      #     dir
      #   shell: bash

      - name: npm install & build
        run: |
          cd ali-dbhub-client
          npm install 
          npm run build

      - name: npm install electron
        run: |
          cd ali-dbhub-client/electron
          cp -r ../dist ./
          yarn

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: "ali-dbhub-client/electron"
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: upload artifacts mac
        uses: actions/upload-artifact@main
        with:
          name: ali-dbhub-mac
          path: ali-dbhub-client/electron-build/*.dmg
          if-no-files-found: ignore

      - name: upload artifacts window
        uses: actions/upload-artifact@main
        with:
          name: ali-dbhub-window
          path: ali-dbhub-client/electron-build/*Setup*.exe
          if-no-files-found: ignore