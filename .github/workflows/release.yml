# Workflow's name
name: Build Client

# Workflow's trigger
# 在创建标签的时候触发打包
# main 分支打包release的
# 其他分支统一打包test的
on:
  push:
    tags:
      - v*

# Workflow's jobs
jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest ]

    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # 获取版本号 workflow不支持 所以用插件
      - name: Create version
        id: chat2db_version
        uses: bhowell2/github-substring-action@1.0.1
        with:
          value: ${{ github.ref }}
          index_of_str: "refs/tags/v"

      # 计算当前是什么环境
      # v1.x.x-dev 代表 dev环境
      # v1.x.x 代表 release
      # 注意这里的变量是 ${{ env.CHAT2DB_ENVIRONMENT }} 这样获取的
      - name: set environment variables
        uses: marcdomain/set-variables@v1
        with:
          variables: |
            CHAT2DB_ENVIRONMENT: ${{ endsWith(github.ref, '-dev') }} == true ? "dev" : "release"

      # 输出基础信息
      - name: Print basic information
        run: |
          echo "current environment: ${{ env.CHAT2DB_ENVIRONMENT }}"
          echo "current version: ${{ steps.chat2db_version.outputs.substring }}"

      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: 16

      # 构建静态文件信息
      - name: Npm install & build & copy
        run: |
          cd ali-dbhub-client
          npm install 
          npm run build:desktop
          cp -r dist ../ali-dbhub-server/ali-dbhub-server-start/src/main/resources/static/front

      # 安装java
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: "17"
          distribution: "adopt"
          cache: "maven"

      # 编译服务端java版本
      - name: Build Java
        run: mvn clean package -B '-Dmaven.test.skip=true' -f ali-dbhub-server/pom.xml

      # 打包jre
      - name: Build jre
        run: jlink --add-modules java.base,java.management,java.naming,java.net.http,java.desktop,java.security.jgss,java.security.sasl,java.sql,jdk.httpserver,jdk.unsupported,java.instrument --output jre --no-man-pages --no-header-files --compress=2

      # 复制jre & 服务端java 到制修订位置
      - name: Copy app &  jre
        run: |
          cp -r jre ali-dbhub-client/electron/
          mkdir ali-dbhub-client/electron/app
          cp ali-dbhub-server/ali-dbhub-server-start/target/ali-dbhub-server-start.jar ali-dbhub-client/electron/app/

      # 安装electron
      - name: Npm install electron
        run: |
          cd ali-dbhub-client/electron
          cp -r ../dist ./
          yarn

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: "ali-dbhub-client/electron"
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          # args: "--c.extraMetadata.appId=com.dbhub --c.extraMetadata.productName=Chat"
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

      # 准备要需要的数据 MacOS
      - name: Prepare upload MacOS
        if: runner.os == 'macOS'
        run: |
          mkdir oss_temp_file 
          cp -r ali-dbhub-client/electron-build/*.dmg ./oss_temp_file

      # 准备要需要的数据 Windows
      - name: Prepare upload Windows
        if: runner.os == 'Windows'
        run: |
          mkdir oss_temp_file 
          cp -r ali-dbhub-client/electron-build/*Setup*.exe ./oss_temp_file

      # 把文件上传到OSS 方便下载
      - name: Set up oss utils
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: "oss-accelerate.aliyuncs.com"
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: 'latest'
      - name: Upload to oss
        run: |
          ossutil cp -rf --acl=public-read ./oss_temp_file/ oss://chat2db/${{ env.CHAT2DB_ENVIRONMENT }}/${{ steps.chat2db_version.outputs.substring }}/

      # 构建完成通知
      - name: Send dingtalk message
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              "title": "构建${{ env.CHAT2DB_ENVIRONMENT }}完成通知",
              "text": "# 构建${{ env.CHAT2DB_ENVIRONMENT }}完成通知   \n ![bang](https://oss-chat2db.alibaba.com/dev/1.0.37-dev/Chat2DB-1.0.37-dev.dmg)   \n ### 下载地址:[https://oss-chat2db.alibaba.com/dev/1.0.37-dev/Chat2DB-1.0.37-dev.dmg](https://oss-chat2db.alibaba.com/dev/1.0.37-dev/Chat2DB-1.0.37-dev.dmg)"
            }
